{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":": a class that generates a sequence of values, inspired by "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" from the swift standard library, but operates synchronously."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":": aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}]}]}]},{"anchor":"Documentation","level":2,"type":"heading","text":"Documentation"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"..\/syncstream"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"..\/bidirectionalstream"}]}]}]},{"anchor":"Getting-Started","level":2,"type":"heading","text":"Getting Started"},{"anchor":"SyncStream","level":3,"type":"heading","text":"SyncStream"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream"},{"type":"text","text":" offers a convenient method to create a sequence from a closure that invokes a continuation to generate elements. However, in certain cases, you may need to produce a sequence synchronously using a closure. To address this need, we introduce "},{"type":"reference","isActive":true,"identifier":"syncstream\/syncstream"},{"type":"text","text":", which shares the same API as "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but operates synchronously."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a simple example of how to use "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let stream = SyncStream<Int> { continuation in","    for i in 0 ..< 10 {","        continuation.yield(i)","    }","    continuation.finish()","}","","for value in stream {","    print(value, terminator: \" \")","}","\/\/ 0 1 2 3 4 5 6 7 8 9"]},{"anchor":"BidirectionalStream","level":3,"type":"heading","text":"BidirectionalStream"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inspired by Python generators, which not only can use "},{"type":"codeVoice","code":"yield"},{"type":"text","text":" to produce values, but also can use "},{"type":"codeVoice","code":"send"},{"type":"text","text":" to receive values, and "},{"type":"codeVoice","code":"return"},{"type":"text","text":" to raise a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error and halt the stream, the "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"BidirectionalAsyncStream"},{"type":"text","text":"  in Swift offer similar features for synchronous and asynchronous operations respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about the generator in python, See: "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0255\/"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, the stream uses the "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" method to send a value back to the stream, which is received by the "},{"type":"codeVoice","code":"yield(_:)"},{"type":"text","text":" return value."}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, NoneType> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","    }","}","","try stream.next() \/\/ 0 start the stream","try stream.send(5) \/\/ 6 send value back to the stream, and get the next value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, when the stream’s closure uses "},{"type":"codeVoice","code":"return(_:)"},{"type":"text","text":" to stop the streaming process, a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error containing the return value will be caught outside the closure."}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, String> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","        if value == 5 {","            continuation.return(\"Stop\")","        }","    }","}","","try stream.next() \/\/ 0 start the stream","do {","    try stream.send(4) \/\/ Throw StopIteration error","} catch {","    \/\/ get return value","    print((error as! StopIteration).value) \/\/ \"Stop\"","}"]},{"anchor":"Contribution","level":2,"type":"heading","text":"Contribution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We welcome contributions to StreamUtilities by opening a pull request on GitHub."}]},{"anchor":"License","level":2,"type":"heading","text":"License"},{"type":"paragraph","inlineContent":[{"type":"text","text":"StreamUtilities is released under the Apache License, Version 2.0."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Copyright 2024 Ruiyang Sun"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/streamutilities"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/StreamUtilities\/documentation\/StreamUtilities","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"StreamUtilities"},{"type":"text","text":" is a toolbox providing two utilities for working with stream in swift:"}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"StreamUtilities","title":"StreamUtilities","symbolKind":"module","role":"collection","modules":[{"name":"StreamUtilities"}]},"hierarchy":{"paths":[[]]},"references":{"https://developer.apple.com/documentation/swift/asyncstream":{"title":"AsyncStream","titleInlineContent":[{"type":"codeVoice","code":"AsyncStream"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream","url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream"},"doc://StreamUtilities/documentation/StreamUtilities":{"role":"collection","title":"StreamUtilities","abstract":[{"type":"codeVoice","code":"StreamUtilities"},{"type":"text","text":" is a toolbox providing two utilities for working with stream in swift:"}],"identifier":"doc:\/\/StreamUtilities\/documentation\/StreamUtilities","kind":"symbol","type":"topic","url":"\/documentation\/streamutilities"},"https://peps.python.org/pep-0342/#new-generator-method-send-value":{"title":"PEP 342","titleInlineContent":[{"type":"text","text":"PEP 342"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value","url":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},"syncstream/syncstream":{"title":"SyncStream","titleInlineContent":[{"type":"codeVoice","code":"SyncStream"}],"type":"link","identifier":"syncstream\/syncstream","url":"syncstream\/syncstream"},"../syncstream":{"title":"SyncStream","titleInlineContent":[{"type":"text","text":"SyncStream"}],"type":"link","identifier":"..\/syncstream","url":"..\/syncstream"},"https://docs.python.org/3/reference/expressions.html#generator-iterator-methods":{"title":"Doc","titleInlineContent":[{"type":"text","text":"Doc"}],"type":"link","identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods","url":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"},"https://peps.python.org/pep-0255/":{"title":"PEP 255","titleInlineContent":[{"type":"text","text":"PEP 255"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0255\/","url":"https:\/\/peps.python.org\/pep-0255\/"},"../bidirectionalstream":{"title":"BidirectionalStream","titleInlineContent":[{"type":"text","text":"BidirectionalStream"}],"type":"link","identifier":"..\/bidirectionalstream","url":"..\/bidirectionalstream"}}}