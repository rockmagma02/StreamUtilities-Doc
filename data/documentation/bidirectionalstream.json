{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inspired by Python generators, which not only can use "},{"type":"codeVoice","code":"yield"},{"type":"text","text":" to produce values, but also can use "},{"type":"codeVoice","code":"send"},{"type":"text","text":" to receive values, and "},{"type":"codeVoice","code":"return"},{"type":"text","text":" to raise a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error and halt the stream, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalSyncStream"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream"},{"type":"text","text":"  in Swift offer similar features for synchronous and asynchronous operations respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about the generator in python, See: "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0255\/"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"}]},{"anchor":"Getting-Started","level":2,"type":"heading","text":"Getting Started"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, the stream uses the "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" method to send a value back to the stream, which is received by the "},{"type":"codeVoice","code":"yield(_:)"},{"type":"text","text":" return value."}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, NoneType> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","    }","}","","try stream.next() \/\/ 0 start the stream","try stream.send(5) \/\/ 6 send value back to the stream, and get the next value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, when the stream’s closure uses "},{"type":"codeVoice","code":"return(_:)"},{"type":"text","text":" to stop the streaming process, a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error containing the return value will be caught outside the closure."}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, String> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","        if value == 5 {","            continuation.return(\"Stop\")","        }","    }","}","","try stream.next() \/\/ 0 start the stream","do {","    try stream.send(4) \/\/ Throw StopIteration error","} catch {","    \/\/ get return value","    print((error as! StopIteration).value) \/\/ \"Stop\"","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/bidirectionalstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"BidirectionalStream","title":"BidirectionalStream","symbolKind":"module","role":"collection","modules":[{"name":"BidirectionalStream"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Supporting Types","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/StopIteration","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/Terminated","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/WrongStreamUse","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore"]},{"title":"BidirectionalStream","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalSyncStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream"]}],"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/WrongStreamUse":{"role":"symbol","title":"WrongStreamUse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WrongStreamUse"}],"abstract":[{"type":"text","text":"An error to indicate an invalid interaction with the stream."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/WrongStreamUse","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WrongStreamUse"}],"url":"\/documentation\/bidirectionalstream\/wrongstreamuse"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore":{"role":"symbol","title":"AsyncSemaphore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"abstract":[{"type":"text","text":"An object that is similar to the "},{"type":"codeVoice","code":"DispatchSemaphore"},{"type":"text","text":" form the "},{"type":"codeVoice","code":"Dispatch"},{"type":"text","text":" package,"},{"type":"text","text":" "},{"type":"text","text":"but it is designed to be used in an asynchronous context."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}],"url":"\/documentation\/bidirectionalstream\/asyncsemaphore"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalSyncStream":{"role":"symbol","title":"BidirectionalSyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalSyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalsyncstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/NoneType":{"role":"symbol","title":"NoneType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoneType"}],"abstract":[{"type":"text","text":"A type to represent "},{"type":"codeVoice","code":"None"},{"type":"text","text":" in Python."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoneType"}],"url":"\/documentation\/bidirectionalstream\/nonetype"},"doc://BidirectionalStream/documentation/BidirectionalStream/Terminated":{"role":"symbol","title":"Terminated","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Terminated"}],"abstract":[{"type":"text","text":"An error to indicate that the stream has been terminated."},{"type":"text","text":" "},{"type":"text","text":"i.e. an error has occurred in the stream’s inside closure."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/Terminated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Terminated"}],"url":"\/documentation\/bidirectionalstream\/terminated"},"doc://BidirectionalStream/documentation/BidirectionalStream/StopIteration":{"role":"symbol","title":"StopIteration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StopIteration"}],"abstract":[{"type":"text","text":"A special error containing the return value to indicate the end of the stream."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/StopIteration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StopIteration"}],"url":"\/documentation\/bidirectionalstream\/stopiteration"},"https://docs.python.org/3/reference/expressions.html#generator-iterator-methods":{"title":"Doc","titleInlineContent":[{"type":"text","text":"Doc"}],"type":"link","identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods","url":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"},"https://peps.python.org/pep-0342/#new-generator-method-send-value":{"title":"PEP 342","titleInlineContent":[{"type":"text","text":"PEP 342"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value","url":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},"https://peps.python.org/pep-0255/":{"title":"PEP 255","titleInlineContent":[{"type":"text","text":"PEP 255"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0255\/","url":"https:\/\/peps.python.org\/pep-0255\/"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream":{"role":"symbol","title":"BidirectionalAsyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream"}}}