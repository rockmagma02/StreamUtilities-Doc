{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"anchor":"SyncStream","level":3,"type":"heading","text":"SyncStream"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"syncstream\/syncstream"},{"type":"text","text":" is inspired by Swift’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream"},{"type":"text","text":" and offers a convenient way to generate a sequence using a closure, without the need to implement the "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just like the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"AsyncStream"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream","overridingTitle":"AsyncStream"},{"type":"text","text":" , the "},{"overridingTitleInlineContent":[{"type":"text","text":"SyncStream"}],"isActive":true,"type":"reference","identifier":"syncstream\/syncstream","overridingTitle":"SyncStream"},{"type":"text","text":" also utilizes a class called "},{"type":"reference","isActive":true,"identifier":"syncstream\/syncstream\/continuation"},{"type":"text","text":" to manage the production progress. The "},{"overridingTitleInlineContent":[{"type":"text","text":"Continuation"}],"isActive":true,"type":"reference","identifier":"syncstream\/syncstream\/continuation","overridingTitle":"Continuation"},{"type":"text","text":" offers two main methods, "},{"type":"reference","isActive":true,"identifier":"syncstream\/syncstream\/continuation\/yield(_:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"syncstream\/syncstream\/continuation\/finish()"},{"type":"text","text":", similar to those in the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"AsyncStream"}],"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream","overridingTitle":"AsyncStream"},{"type":"text","text":", but operates synchronously. If you are familiar with Python, you can consider the  "},{"overridingTitleInlineContent":[{"type":"text","text":"SyncStream"}],"isActive":true,"type":"reference","identifier":"syncstream\/syncstream","overridingTitle":"SyncStream"},{"type":"text","text":" as a generator."}]},{"type":"codeListing","syntax":"swift","code":["let stream = SyncStream<Int> { continuation in","    for i in 0..<10 {","        continuation.yield(i)","    }","    continuation.finish()","}","","for value in stream {","    print(value, terminator: \" \")","}","\/\/ 0 1 2 3 4 5 6 7 8 9"]},{"anchor":"BidirectionalSyncStream","level":3,"type":"heading","text":"BidirectionalSyncStream"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inspired by the generator in python, which can not only use the "},{"type":"codeVoice","code":"yield"},{"type":"text","text":" to generate new value, but also can use "},{"type":"codeVoice","code":"send"},{"type":"text","text":" to sendback value and use "},{"type":"codeVoice","code":"return"},{"type":"text","text":" to throw "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error to stop the stream. The "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" is a class that provides the same functionality in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about the generator in python, See: "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0255\/"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, NoneType> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","    }","}","","try stream.next() \/\/ 0 start the stream","try stream.send(5) \/\/ 6 send value back to the stream, and get the next value"]},{"type":"codeListing","syntax":null,"code":["let stream = BidirectionalSyncStream<Int, Int, String> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","        if value == 5 {","            continuation.return(\"Stop\")","        }","    }","}","","try stream.next() \/\/ 0 start the stream","do {","    try stream.send(4) \/\/ Throw StopIteration error","} catch {","    \/\/ get return value","    print((error as! StopIteration).value) \/\/ \"Stop\"","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syncstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyncStream\/documentation\/SyncStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"SyncStream","title":"SyncStream","symbolKind":"module","role":"collection","modules":[{"name":"SyncStream"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Class","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream"]},{"title":"Classes","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalAsyncStream"]},{"title":"Structures","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/Terminated"]}],"references":{"syncstream/syncstream":{"title":"SyncStream","titleInlineContent":[{"type":"text","text":"SyncStream"}],"type":"link","identifier":"syncstream\/syncstream","url":"syncstream\/syncstream"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream":{"role":"symbol","title":"BidirectionalSyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}],"url":"\/documentation\/syncstream\/bidirectionalsyncstream"},"https://developer.apple.com/documentation/swift/asyncstream":{"title":"AsyncStream","titleInlineContent":[{"type":"codeVoice","code":"AsyncStream"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream","url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncstream"},"https://docs.python.org/3/reference/expressions.html#generator-iterator-methods":{"title":"Doc","titleInlineContent":[{"type":"text","text":"Doc"}],"type":"link","identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods","url":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"},"doc://SyncStream/documentation/SyncStream":{"role":"collection","title":"SyncStream","abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream","kind":"symbol","type":"topic","url":"\/documentation\/syncstream"},"syncstream/syncstream/continuation":{"title":"Continuation","titleInlineContent":[{"type":"text","text":"Continuation"}],"type":"link","identifier":"syncstream\/syncstream\/continuation","url":"syncstream\/syncstream\/continuation"},"syncstream/syncstream/continuation/finish()":{"title":"finish","titleInlineContent":[{"type":"codeVoice","code":"finish"}],"type":"link","identifier":"syncstream\/syncstream\/continuation\/finish()","url":"syncstream\/syncstream\/continuation\/finish()"},"https://peps.python.org/pep-0255/":{"title":"PEP 255","titleInlineContent":[{"type":"text","text":"PEP 255"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0255\/","url":"https:\/\/peps.python.org\/pep-0255\/"},"doc://SyncStream/documentation/SyncStream/Terminated":{"role":"symbol","title":"Terminated","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Terminated"}],"abstract":[{"type":"text","text":"An error to indicate that the stream has been terminated."},{"type":"text","text":" "},{"type":"text","text":"i.e. an error has occurred in the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/Terminated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Terminated"}],"url":"\/documentation\/syncstream\/terminated"},"doc://SyncStream/documentation/SyncStream/SyncStream":{"role":"symbol","title":"SyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncStream"}],"abstract":[{"type":"text","text":"An synchronous sequence generated from a closure that calls a continuation to produce new elements."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyncStream"}],"url":"\/documentation\/syncstream\/syncstream"},"https://peps.python.org/pep-0342/#new-generator-method-send-value":{"title":"PEP 342","titleInlineContent":[{"type":"text","text":"PEP 342"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value","url":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},"doc://SyncStream/documentation/SyncStream/BidirectionalAsyncStream":{"role":"symbol","title":"BidirectionalAsyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalAsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}],"url":"\/documentation\/syncstream\/bidirectionalasyncstream"},"syncstream/syncstream/continuation/yield(_:)":{"title":"yield(_:)","titleInlineContent":[{"type":"codeVoice","code":"yield(_:)"}],"type":"link","identifier":"syncstream\/syncstream\/continuation\/yield(_:)","url":"syncstream\/syncstream\/continuation\/yield(_:)"}}}