{"seeAlsoSections":[{"title":"Supporting Types","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/StopIteration","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/Terminated","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/WrongStreamUse"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"title":"AsyncSemaphore","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:19BidirectionalStream14AsyncSemaphoreC","modules":[{"name":"BidirectionalStream"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}]},"abstract":[{"type":"text","text":"An object that is similar to the "},{"type":"codeVoice","code":"DispatchSemaphore"},{"type":"text","text":" form the "},{"type":"codeVoice","code":"Dispatch"},{"type":"text","text":" package,"},{"type":"text","text":" "},{"type":"text","text":"but it is designed to be used in an asynchronous context."}],"sections":[],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/BidirectionalStream\/s8SendableP","doc:\/\/BidirectionalStream\/ScA","doc:\/\/BidirectionalStream\/12_Concurrency8AnyActorP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/init(value:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/signal()","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait()","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait(timeout:)","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait(wallTimeout:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/Actor-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/bidirectionalstream\/asyncsemaphore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"languages":["swift"],"platforms":["macOS"]}]}],"references":{"doc://BidirectionalStream/12_Concurrency8AnyActorP":{"type":"unresolvable","title":"_Concurrency.AnyActor","identifier":"doc:\/\/BidirectionalStream\/12_Concurrency8AnyActorP"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/wait(wallTimeout:)":{"role":"symbol","title":"wait(wallTimeout:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wallTimeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchWallTime","preciseIdentifier":"s:8Dispatch0A8WallTimeV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"DispatchTimeoutResult","preciseIdentifier":"s:8Dispatch0A13TimeoutResultO"}],"abstract":[{"type":"text","text":"Waits(decrements) the semaphore with a wall timeout, blocking the current task if necessary."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait(wallTimeout:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/wait(walltimeout:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/WrongStreamUse":{"role":"symbol","title":"WrongStreamUse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WrongStreamUse"}],"abstract":[{"type":"text","text":"An error to indicate an invalid interaction with the stream."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/WrongStreamUse","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WrongStreamUse"}],"url":"\/documentation\/bidirectionalstream\/wrongstreamuse"},"doc://BidirectionalStream/documentation/BidirectionalStream/StopIteration":{"role":"symbol","title":"StopIteration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StopIteration"}],"abstract":[{"type":"text","text":"A special error containing the return value to indicate the end of the stream."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/StopIteration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StopIteration"}],"url":"\/documentation\/bidirectionalstream\/stopiteration"},"doc://BidirectionalStream/documentation/BidirectionalStream/Terminated":{"role":"symbol","title":"Terminated","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Terminated"}],"abstract":[{"type":"text","text":"An error to indicate that the stream has been terminated."},{"type":"text","text":" "},{"type":"text","text":"i.e. an error has occurred in the stream’s inside closure."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/Terminated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Terminated"}],"url":"\/documentation\/bidirectionalstream\/terminated"},"doc://BidirectionalStream/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/BidirectionalStream\/s8SendableP"},"doc://BidirectionalStream/ScA":{"type":"unresolvable","title":"_Concurrency.Actor","identifier":"doc:\/\/BidirectionalStream\/ScA"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/init(value:)":{"role":"symbol","title":"init(value:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a new instance of the semaphore with the specified initial value."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/init(value:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/init(value:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore":{"role":"symbol","title":"AsyncSemaphore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"abstract":[{"type":"text","text":"An object that is similar to the "},{"type":"codeVoice","code":"DispatchSemaphore"},{"type":"text","text":" form the "},{"type":"codeVoice","code":"Dispatch"},{"type":"text","text":" package,"},{"type":"text","text":" "},{"type":"text","text":"but it is designed to be used in an asynchronous context."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}],"url":"\/documentation\/bidirectionalstream\/asyncsemaphore"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/signal()":{"role":"symbol","title":"signal()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"signal"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Signals(increments) the semaphore, allowing one waiting task to resume execution."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/signal()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/signal()"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/Actor-Implementations":{"role":"collectionGroup","title":"Actor Implementations","abstract":[],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/Actor-Implementations","kind":"article","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/actor-implementations"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/wait(timeout:)":{"role":"symbol","title":"wait(timeout:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTime","preciseIdentifier":"s:8Dispatch0A4TimeV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"DispatchTimeoutResult","preciseIdentifier":"s:8Dispatch0A13TimeoutResultO"}],"abstract":[{"type":"text","text":"Waits(decrements) the semaphore with a timeout, blocking the current task if necessary."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait(timeout:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/wait(timeout:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/wait()":{"role":"symbol","title":"wait()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Waits(decrements) the semaphore, blocking the current task if necessary."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/wait()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/wait()"},"doc://BidirectionalStream/documentation/BidirectionalStream/NoneType":{"role":"symbol","title":"NoneType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoneType"}],"abstract":[{"type":"text","text":"A type to represent "},{"type":"codeVoice","code":"None"},{"type":"text","text":" in Python."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoneType"}],"url":"\/documentation\/bidirectionalstream\/nonetype"}}}