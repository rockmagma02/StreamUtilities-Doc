{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"signal"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/bidirectionalstream\/asyncsemaphore\/signal()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/signal()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Signals(increments) the semaphore, allowing one waiting task to resume execution."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"signal"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"title":"signal()","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:19BidirectionalStream14AsyncSemaphoreC6signalyyYaF","modules":[{"name":"BidirectionalStream"}]},"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore"]]},"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/signal()":{"role":"symbol","title":"signal()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"signal"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Signals(increments) the semaphore, allowing one waiting task to resume execution."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/signal()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/signal()"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Pythonâ€™s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore":{"role":"symbol","title":"AsyncSemaphore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"abstract":[{"type":"text","text":"An object that is similar to the "},{"type":"codeVoice","code":"DispatchSemaphore"},{"type":"text","text":" form the "},{"type":"codeVoice","code":"Dispatch"},{"type":"text","text":" package,"},{"type":"text","text":" "},{"type":"text","text":"but it is designed to be used in an asynchronous context."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}],"url":"\/documentation\/bidirectionalstream\/asyncsemaphore"}}}