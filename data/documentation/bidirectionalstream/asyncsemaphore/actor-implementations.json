{"variants":[{"paths":["\/documentation\/bidirectionalstream\/asyncsemaphore\/actor-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/Actor-Implementations","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/assertIsolated(_:file:line:)","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/assumeIsolated(_:file:line:)","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/preconditionIsolated(_:file:line:)"],"generated":true}],"kind":"article","metadata":{"roleHeading":"API Collection","title":"Actor Implementations","role":"collectionGroup","modules":[{"name":"BidirectionalStream"}]},"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore"]]},"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore":{"role":"symbol","title":"AsyncSemaphore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"abstract":[{"type":"text","text":"An object that is similar to the "},{"type":"codeVoice","code":"DispatchSemaphore"},{"type":"text","text":" form the "},{"type":"codeVoice","code":"Dispatch"},{"type":"text","text":" package,"},{"type":"text","text":" "},{"type":"text","text":"but it is designed to be used in an asynchronous context."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}],"url":"\/documentation\/bidirectionalstream\/asyncsemaphore"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/preconditionIsolated(_:file:line:)":{"role":"symbol","title":"preconditionIsolated(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"preconditionIsolated"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/preconditionIsolated(_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/preconditionisolated(_:file:line:)"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Pythonâ€™s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/assumeIsolated(_:file:line:)":{"role":"symbol","title":"assumeIsolated(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assumeIsolated"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"keyword","text":"isolated"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/assumeIsolated(_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/assumeisolated(_:file:line:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/AsyncSemaphore/assertIsolated(_:file:line:)":{"role":"symbol","title":"assertIsolated(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assertIsolated"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/AsyncSemaphore\/assertIsolated(_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/asyncsemaphore\/assertisolated(_:file:line:)"}}}