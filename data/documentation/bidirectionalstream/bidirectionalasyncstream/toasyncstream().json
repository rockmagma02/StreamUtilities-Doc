{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncStream"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","preciseIdentifier":"s:19BidirectionalStream8NoneTypeV","text":"NoneType"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only works when the "},{"type":"codeVoice","code":"SendT"},{"type":"text","text":" type is "},{"type":"codeVoice","code":"NoneType"},{"type":"text","text":", and the "},{"type":"codeVoice","code":"YieldT"},{"type":"text","text":" type is the same as the "},{"type":"codeVoice","code":"ReturnT"},{"type":"text","text":" type."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/toasyncstream()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/toAsyncStream()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"toAsyncStream()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncStream"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:19BidirectionalStream0a5AsyncB0C02tocB0ScSyxGyYaq0_RszAA8NoneTypeVRs_rlF","extendedModule":"BidirectionalStream","modules":[{"name":"BidirectionalStream"}]},"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream"]]},"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/NoneType":{"role":"symbol","title":"NoneType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoneType"}],"abstract":[{"type":"text","text":"A type to represent "},{"type":"codeVoice","code":"None"},{"type":"text","text":" in Python."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/NoneType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoneType"}],"url":"\/documentation\/bidirectionalstream\/nonetype"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/toAsyncStream()":{"role":"symbol","title":"toAsyncStream()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncStream"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/toAsyncStream()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/toasyncstream()"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream":{"role":"symbol","title":"BidirectionalAsyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream"}}}