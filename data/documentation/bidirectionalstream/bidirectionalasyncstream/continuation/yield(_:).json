{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"element"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SendT"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"element","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to yield."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value sent back."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/continuation\/yield(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation\/yield(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Yields a value to the stream and waits for a value to be sent back."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SendT"}],"title":"yield(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:19BidirectionalStream0a5AsyncB0C12ContinuationC5yieldyq_xYaF","modules":[{"name":"BidirectionalStream"}]},"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation"]]},"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/Continuation/yield(_:)":{"role":"symbol","title":"yield(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SendT"}],"abstract":[{"type":"text","text":"Yields a value to the stream and waits for a value to be sent back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation\/yield(_:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/continuation\/yield(_:)"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/Continuation":{"role":"symbol","title":"BidirectionalAsyncStream.Continuation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Continuation"}],"abstract":[{"type":"text","text":"A continuation of the "},{"type":"codeVoice","code":"BidirectionalAsyncStream"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It is used to communicate between the two parties."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Continuation"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/continuation"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream":{"role":"symbol","title":"BidirectionalAsyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream"}}}