{"seeAlsoSections":[{"title":"BidirectionalStream","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalSyncStream"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"YieldT"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SendT"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ReturnT"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]}],"variants":[{"paths":["\/documentation\/bidirectionalstream\/bidirectionalasyncstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"title":"BidirectionalAsyncStream","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:19BidirectionalStream0a5AsyncB0C","modules":[{"name":"BidirectionalStream"}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}]},"hierarchy":{"paths":[["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream"]]},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation"]},{"title":"Initializers","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/init(_:_:_:_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/next()","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/send(_:)","doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/toAsyncStream()"]},{"title":"Type Methods","identifiers":["doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/makeStream(_:_:_:)"]}],"references":{"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/init(_:_:_:_:)":{"role":"symbol","title":"init(_:_:_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"BidirectionalAsyncStream","preciseIdentifier":"s:19BidirectionalStream0a5AsyncB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:19BidirectionalStream0a5AsyncB0C12ContinuationC"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/init(_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/init(_:_:_:_:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/makeStream(_:_:_:)":{"role":"symbol","title":"makeStream(_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStream"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":".Type) -> (stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BidirectionalAsyncStream","preciseIdentifier":"s:19BidirectionalStream0a5AsyncB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BidirectionalAsyncStream","preciseIdentifier":"s:19BidirectionalStream0a5AsyncB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:19BidirectionalStream0a5AsyncB0C12ContinuationC"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Constructs an Bidirectional asynchronous stream from the Element Type"}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/makeStream(_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/makestream(_:_:_:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/toAsyncStream()":{"role":"symbol","title":"toAsyncStream()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toAsyncStream"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/toAsyncStream()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/toasyncstream()"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalSyncStream":{"role":"symbol","title":"BidirectionalSyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalSyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalsyncstream"},"doc://BidirectionalStream/documentation/BidirectionalStream":{"role":"collection","title":"BidirectionalStream","abstract":[{"type":"codeVoice","code":"BidirectionalStream"},{"type":"text","text":" aims to bring features similar to Python’s Generator to Swift. Users can generate values using "},{"type":"codeVoice","code":"yield"},{"type":"text","text":", send values back with "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and close the stream by throwing a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Sends a value to the stream, and returns the next value."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/send(_:)"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream":{"role":"symbol","title":"BidirectionalAsyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalAsyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalAsyncStream"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/Continuation":{"role":"symbol","title":"BidirectionalAsyncStream.Continuation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Continuation"}],"abstract":[{"type":"text","text":"A continuation of the "},{"type":"codeVoice","code":"BidirectionalAsyncStream"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It is used to communicate between the two parties."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/Continuation","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Continuation"}],"url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/continuation"},"doc://BidirectionalStream/documentation/BidirectionalStream/BidirectionalAsyncStream/next()":{"role":"symbol","title":"next()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Advances the stream to the next value. In this stream, it is used to"},{"type":"text","text":" "},{"type":"text","text":"start the stream."}],"identifier":"doc:\/\/BidirectionalStream\/documentation\/BidirectionalStream\/BidirectionalAsyncStream\/next()","kind":"symbol","type":"topic","url":"\/documentation\/bidirectionalstream\/bidirectionalasyncstream\/next()"}}}