{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toSyncStream"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","preciseIdentifier":"s:10SyncStreamAAC","text":"SyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/NoneType","preciseIdentifier":"s:10SyncStream8NoneTypeV","text":"NoneType"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only works when the "},{"type":"codeVoice","code":"SendT"},{"type":"text","text":" type is "},{"type":"codeVoice","code":"NoneType"},{"type":"text","text":", and the "},{"type":"codeVoice","code":"YieldT"},{"type":"text","text":" type is the same as the "},{"type":"codeVoice","code":"ReturnT"},{"type":"text","text":" type."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syncstream\/bidirectionalsyncstream\/tosyncstream()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/toSyncStream()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"toSyncStream()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toSyncStream"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:10SyncStream013BidirectionalaB0C02toaB0A2ACyxGyq0_RszAA8NoneTypeVRs_rlF","extendedModule":"SyncStream","modules":[{"name":"SyncStream"}]},"hierarchy":{"paths":[["doc:\/\/SyncStream\/documentation\/SyncStream","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream"]]},"seeAlsoSections":[{"title":"Using a BidirectionalSyncStream","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/next()","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/send(_:)"],"generated":true}],"references":{"doc://SyncStream/documentation/SyncStream/SyncStream":{"role":"symbol","title":"SyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncStream"}],"abstract":[{"type":"text","text":"An synchronous sequence generated from a closure that calls a continuation to produce new elements."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyncStream"}],"url":"\/documentation\/syncstream\/syncstream"},"doc://SyncStream/documentation/SyncStream":{"role":"collection","title":"SyncStream","abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream","kind":"symbol","type":"topic","url":"\/documentation\/syncstream"},"doc://SyncStream/documentation/SyncStream/NoneType":{"role":"symbol","title":"NoneType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoneType"}],"abstract":[{"type":"text","text":"A type to represent "},{"type":"codeVoice","code":"None"},{"type":"text","text":" in Python."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/NoneType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoneType"}],"url":"\/documentation\/syncstream\/nonetype"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Sends a value to the stream, and returns the next value."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/send(_:)"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/next()":{"role":"symbol","title":"next()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Advances the stream to the next value. In this stream, it is used to"},{"type":"text","text":" "},{"type":"text","text":"start the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/next()","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/next()"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/toSyncStream()":{"role":"symbol","title":"toSyncStream()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toSyncStream"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/toSyncStream()","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/tosyncstream()"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream":{"role":"symbol","title":"BidirectionalSyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Pythonâ€™s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}],"url":"\/documentation\/syncstream\/bidirectionalsyncstream"}}}