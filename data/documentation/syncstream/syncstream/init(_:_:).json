{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type = Element.self, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"build"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","preciseIdentifier":"s:10SyncStreamAAC","text":"SyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/Continuation","preciseIdentifier":"s:10SyncStreamAAC12ContinuationC","text":"Continuation"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"build: A closure that takes a continuation and uses it to produce elements."}]}]}]},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"type":"codeListing","syntax":"swift","code":["let stream = SyncStream<Int> { continuation in","     continuation.yield(1)","     continuation.yield(2)","     continuation.finish()","     continuation.yield(3) \/\/ This will be ignored","}","","for element in stream {","    print(element, terminator: \" \")","}","\/\/ 1 2"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syncstream\/syncstream\/init(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/init(_:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Constructs an synchronous stream for an element type, using am element-producing closure."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:10SyncStreamAAC12ContinuationC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"title":"init(_:_:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:10SyncStreamAACyAByxGxm_yAB12ContinuationCyx_Gctcfc","modules":[{"name":"SyncStream"}]},"hierarchy":{"paths":[["doc:\/\/SyncStream\/documentation\/SyncStream","doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream"]]},"seeAlsoSections":[{"title":"Creating a Continuation-Based Stream","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/init(unfolding:)","doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/Continuation"],"generated":true}],"references":{"doc://SyncStream/documentation/SyncStream":{"role":"collection","title":"SyncStream","abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream","kind":"symbol","type":"topic","url":"\/documentation\/syncstream"},"doc://SyncStream/documentation/SyncStream/SyncStream/Continuation":{"role":"symbol","title":"SyncStream.Continuation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Continuation"}],"abstract":[{"type":"text","text":"A mechanism to interface between synchronous code and a synchronous stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/Continuation","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Continuation"}],"url":"\/documentation\/syncstream\/syncstream\/continuation"},"doc://SyncStream/documentation/SyncStream/SyncStream/init(unfolding:)":{"role":"symbol","title":"init(unfolding:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unfolding"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Constructs an synchronous stream from a given element-producing closure."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/init(unfolding:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/syncstream\/init(unfolding:)"},"doc://SyncStream/documentation/SyncStream/SyncStream/init(_:_:)":{"role":"symbol","title":"init(_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:10SyncStreamAAC12ContinuationC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Constructs an synchronous stream for an element type, using am element-producing closure."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/init(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/syncstream\/init(_:_:)"},"doc://SyncStream/documentation/SyncStream/SyncStream":{"role":"symbol","title":"SyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncStream"}],"abstract":[{"type":"text","text":"An synchronous sequence generated from a closure that calls a continuation to produce new elements."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyncStream"}],"url":"\/documentation\/syncstream\/syncstream"}}}