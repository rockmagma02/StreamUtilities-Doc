{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"drop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","preciseIdentifier":"s:10SyncStreamAAC","text":"SyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters:"},{"type":"text","text":" "},{"type":"text","text":"- while: A closure that takes an element as its argument and returns a Boolean value"},{"type":"text","text":" "},{"type":"text","text":"that indicates whether the element should be omitted from the result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns:"},{"type":"text","text":" "},{"type":"text","text":"A SyncStream containing the elements of the synchronous sequence, starting at the"},{"type":"text","text":" "},{"type":"text","text":"first element for which the predicate returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/syncstream\/syncstream\/drop(while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/drop(while:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a SyncStream containing the elements of the base synchronous sequence, with"},{"type":"text","text":" "},{"type":"text","text":"the initial elements omitted until the predicate returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"drop(while:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"drop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:10SyncStreamAAC4drop5whileAByxGSbxc_tF","extendedModule":"SyncStream","modules":[{"name":"SyncStream"}]},"hierarchy":{"paths":[["doc:\/\/SyncStream\/documentation\/SyncStream","doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream"]]},"seeAlsoSections":[{"title":"Extracting Elements","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/dropFirst(_:)","doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/filter(_:)"],"generated":true}],"references":{"doc://SyncStream/documentation/SyncStream":{"role":"collection","title":"SyncStream","abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream","kind":"symbol","type":"topic","url":"\/documentation\/syncstream"},"doc://SyncStream/documentation/SyncStream/SyncStream/dropFirst(_:)":{"role":"symbol","title":"dropFirst(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dropFirst"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a SyncStream containing the elements of the base synchronous sequence, with"},{"type":"text","text":" "},{"type":"text","text":"the specified number of elements skipped from the beginning."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/dropFirst(_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/syncstream\/dropfirst(_:)"},"doc://SyncStream/documentation/SyncStream/SyncStream":{"role":"symbol","title":"SyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncStream"}],"abstract":[{"type":"text","text":"An synchronous sequence generated from a closure that calls a continuation to produce new elements."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyncStream"}],"url":"\/documentation\/syncstream\/syncstream"},"doc://SyncStream/documentation/SyncStream/SyncStream/filter(_:)":{"role":"symbol","title":"filter(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates an synchronous stream that contains, in order, the elements of the base"},{"type":"text","text":" "},{"type":"text","text":"sequence that satisfy the given predicate."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/filter(_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/syncstream\/filter(_:)"},"doc://SyncStream/documentation/SyncStream/SyncStream/drop(while:)":{"role":"symbol","title":"drop(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"drop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a SyncStream containing the elements of the base synchronous sequence, with"},{"type":"text","text":" "},{"type":"text","text":"the initial elements omitted until the predicate returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream\/drop(while:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/syncstream\/drop(while:)"}}}