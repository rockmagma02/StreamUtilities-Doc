{"seeAlsoSections":[{"title":"Class","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"YieldT"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SendT"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ReturnT"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inspired by the generator in python, which can not only use the "},{"type":"codeVoice","code":"yield"},{"type":"text","text":" to generate new value, but also can use "},{"type":"codeVoice","code":"send"},{"type":"text","text":" to sendback value and use "},{"type":"codeVoice","code":"return"},{"type":"text","text":" to throw "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error to stop the stream. The "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" is a class that provides the same functionality in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about the generator in python, See: "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0255\/"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":" class, the "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" also use the  "},{"type":"codeVoice","code":"Continuation"},{"type":"text","text":" to communicate with the stream. The "},{"type":"codeVoice","code":"Continuation"},{"type":"text","text":" provides two important method, the "},{"type":"codeVoice","code":"yield(_:)"},{"type":"text","text":" will yield a element to the stream, and then suspend for a value sended form the stream, the "},{"type":"codeVoice","code":"return(_:)"},{"type":"text","text":" will close the stream and throw a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error with a return value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Stream side, User can use "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" to start the stream, and this method will return the first yielded value. After the first "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" invocation, user should to use "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" to control the stream, this method will send a value back, and then return next yielded value. After the stream is closed, aka the "},{"type":"codeVoice","code":"return(_:)"},{"type":"text","text":" is invoked, the "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" or "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" will throw a "},{"type":"codeVoice","code":"StopIteration"},{"type":"text","text":" error, user can get the return value from the error."}]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, NoneType> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","    }","}","","try stream.next() \/\/ 0 start the stream","try stream.send(5) \/\/ 6 send value back to the stream, and get the next value"]},{"type":"codeListing","syntax":"swift","code":["let stream = BidirectionalSyncStream<Int, Int, String> { continuation in","    var value = 0","    while true {","        value = continuation.yield(value)","        value += 1","        if value == 5 {","            continuation.return(\"Stop\")","        }","    }","}","","try stream.next() \/\/ 0 start the stream","do {","    try stream.send(4) \/\/ Throw StopIteration error","} catch {","    \/\/ get return value","    print((error as! StopIteration).value) \/\/ \"Stop\"","}"]}]}],"variants":[{"paths":["\/documentation\/syncstream\/bidirectionalsyncstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"title":"BidirectionalSyncStream","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:10SyncStream013BidirectionalaB0C","modules":[{"name":"SyncStream"}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}]},"hierarchy":{"paths":[["doc:\/\/SyncStream\/documentation\/SyncStream"]]},"topicSections":[{"title":"Supporting Types","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/NoneType"]},{"title":"Errors","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/StopIteration","doc:\/\/SyncStream\/documentation\/SyncStream\/WrongStreamUse"]},{"title":"Building a BidirectionalSyncStream","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/init(_:_:_:_:)","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/Continuation"]},{"title":"Using a BidirectionalSyncStream","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/next()","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/send(_:)","doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/toSyncStream()"]},{"title":"Type Methods","identifiers":["doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/makeStream(_:_:_:)"]}],"references":{"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/next()":{"role":"symbol","title":"next()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Advances the stream to the next value. In this stream, it is used to"},{"type":"text","text":" "},{"type":"text","text":"start the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/next()","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/next()"},"doc://SyncStream/documentation/SyncStream":{"role":"collection","title":"SyncStream","abstract":[{"type":"text","text":"SyncStream Package provides two classes, One is SyncStream which is similar to the swift "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" but run in synchronous way. The other is "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":" which is inspired by the generator in python, have the ability to send values back to the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream","kind":"symbol","type":"topic","url":"\/documentation\/syncstream"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/Continuation":{"role":"symbol","title":"BidirectionalSyncStream.Continuation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Continuation"}],"abstract":[{"type":"text","text":"A continuation of the "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It is used to communicate between the two parties."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/Continuation","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Continuation"}],"url":"\/documentation\/syncstream\/bidirectionalsyncstream\/continuation"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream":{"role":"symbol","title":"BidirectionalSyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalSyncStream"}],"abstract":[{"type":"text","text":"A mechanism inspired by Python’s generator to allow for bidirectional communication between two"},{"type":"text","text":" "},{"type":"text","text":"parties. One party can yield a value and the other party can send a value back."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSyncStream"}],"url":"\/documentation\/syncstream\/bidirectionalsyncstream"},"doc://SyncStream/documentation/SyncStream/NoneType":{"role":"symbol","title":"NoneType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoneType"}],"abstract":[{"type":"text","text":"A type to represent "},{"type":"codeVoice","code":"None"},{"type":"text","text":" in Python."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/NoneType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoneType"}],"url":"\/documentation\/syncstream\/nonetype"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"YieldT"}],"abstract":[{"type":"text","text":"Sends a value to the stream, and returns the next value."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/send(_:)"},"https://docs.python.org/3/reference/expressions.html#generator-iterator-methods":{"title":"Doc","titleInlineContent":[{"type":"text","text":"Doc"}],"type":"link","identifier":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods","url":"https:\/\/docs.python.org\/3\/reference\/expressions.html#generator-iterator-methods"},"https://peps.python.org/pep-0255/":{"title":"PEP 255","titleInlineContent":[{"type":"text","text":"PEP 255"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0255\/","url":"https:\/\/peps.python.org\/pep-0255\/"},"doc://SyncStream/documentation/SyncStream/StopIteration":{"role":"symbol","title":"StopIteration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StopIteration"}],"abstract":[{"type":"text","text":"A special error to indicate the end of the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/StopIteration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StopIteration"}],"url":"\/documentation\/syncstream\/stopiteration"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/init(_:_:_:_:)":{"role":"symbol","title":"init(_:_:_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"BidirectionalSyncStream","preciseIdentifier":"s:10SyncStream013BidirectionalaB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:10SyncStream013BidirectionalaB0C12ContinuationC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"BidirectionalSyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/init(_:_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/init(_:_:_:_:)"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/makeStream(_:_:_:)":{"role":"symbol","title":"makeStream(_:_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeStream"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":".Type, "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":".Type) -> (stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BidirectionalSyncStream","preciseIdentifier":"s:10SyncStream013BidirectionalaB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">, continuation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BidirectionalSyncStream","preciseIdentifier":"s:10SyncStream013BidirectionalaB0C"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SendT"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ReturnT"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Continuation","preciseIdentifier":"s:10SyncStream013BidirectionalaB0C12ContinuationC"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Constructs an Bidrectional synchronous stream from the Element Type"}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/makeStream(_:_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/makestream(_:_:_:)"},"doc://SyncStream/documentation/SyncStream/SyncStream":{"role":"symbol","title":"SyncStream","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncStream"}],"abstract":[{"type":"text","text":"An synchronous sequence generated from a closure that calls a continuation to produce new elements."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/SyncStream","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyncStream"}],"url":"\/documentation\/syncstream\/syncstream"},"https://peps.python.org/pep-0342/#new-generator-method-send-value":{"title":"PEP 342","titleInlineContent":[{"type":"text","text":"PEP 342"}],"type":"link","identifier":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value","url":"https:\/\/peps.python.org\/pep-0342\/#new-generator-method-send-value"},"doc://SyncStream/documentation/SyncStream/BidirectionalSyncStream/toSyncStream()":{"role":"symbol","title":"toSyncStream()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toSyncStream"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"SyncStream","preciseIdentifier":"s:10SyncStreamAAC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"YieldT"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Converts the stream to a "},{"type":"codeVoice","code":"SyncStream"},{"type":"text","text":"."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/BidirectionalSyncStream\/toSyncStream()","kind":"symbol","type":"topic","url":"\/documentation\/syncstream\/bidirectionalsyncstream\/tosyncstream()"},"doc://SyncStream/documentation/SyncStream/WrongStreamUse":{"role":"symbol","title":"WrongStreamUse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WrongStreamUse"}],"abstract":[{"type":"text","text":"An error to indicate an invalid interaction with the stream."}],"identifier":"doc:\/\/SyncStream\/documentation\/SyncStream\/WrongStreamUse","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WrongStreamUse"}],"url":"\/documentation\/syncstream\/wrongstreamuse"}}}